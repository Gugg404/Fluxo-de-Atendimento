@page "/fluxo/estoque"
@inject FluxoDeAtendimento.Repositories.ContatoRepository ContatoRepo
@inject NavigationManager NavManager

<h3 class="text-2xl font-bold mb-2">Fluxo - Estoque</h3>

@if (contato != null)
{
    <div class="bg-gray-50 p-4 rounded border mb-4" style="max-width:600px;">
        <p><strong>Nome:</strong> @contato.Nome</p>
        <p><strong>Usuário:</strong> @contato.Usuario</p>
        <p><strong>Situação:</strong> @contato.Situacao</p>
        <p><strong>Módulo: Estoque</strong></p>
    </div>
}
else
{
    <div class="alert alert-warning">Contato não encontrado.</div>
}

<p>Selecione o tipo de cadastro com o qual o cliente está com dúvida:</p>
<div class="d-flex flex-column gap-2 mt-3" style="max-width:200px;">
    <button class="btn btn-warning w-100" @onclick="IrParaMovimentacoes">Movimentações</button>
    <button class="btn btn-primary w-100" @onclick="VoltarSuporte">Voltar</button>
</div>

<h4 class="mt-6 mb-2 text-lg font-semibold">Histórico de etapas</h4>
<ul class="list-disc pl-6">
    @foreach (var etapa in ContatoRepo.ObterHistorico())
    {
        <li>@etapa</li>
    }
</ul>

@code {
    private FluxoDeAtendimento.Models.Contato? contato;

    protected override void OnInitialized()
    {
        contato = ContatoRepo.ObterContatoAtual();
        if (contato != null)
        {
            ContatoRepo.RegistrarEtapa("Entrou na etapa de Estoque");
        }
    }

    private void VoltarSuporte()
    {
        NavManager.NavigateTo("/fluxo/suporte");
    }
    private void IrParaMovimentacoes()
    {
        NavManager.NavigateTo("/fluxo/estoque/movimentacoes");
    }
}