@page "/identificacao"
@using FluxoDeAtendimento.Models
@inject FluxoDeAtendimento.Repositories.ContatoRepository ContatoRepo
@inject NavigationManager NavManager

<h3 class="text-2xl font-bold mb-4">Identificação de Contato</h3>

<EditForm Model="novoContato" OnValidSubmit="SalvarContato">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div style="max-width:600px;">
        <div class="form-field">
            <label>Nome</label>
            <InputText @bind-Value="novoContato.Nome" class="input" />
            <ValidationMessage For="@(() => novoContato.Nome)" />
        </div>

        <div class="form-field">
            <label>Usuário</label>
            <InputText @bind-Value="novoContato.Usuario" class="input" />
            <ValidationMessage For="@(() => novoContato.Usuario)" />
        </div>

        <div class="form-field">
            <label>Administrador</label>
            <InputText @bind-Value="novoContato.Administrador" class="input" />
        </div>

        <div class="form-field">
            <label>Situação</label>
            <InputText @bind-Value="novoContato.Situacao" class="input" />
            <ValidationMessage For="@(() => novoContato.Situacao)" />
        </div>

        <div style="margin-top:12px;">
            <button class="btn btn-primary" type="submit">Salvar</button>
            <button type="button" class="btn" @onclick="LimparFormulario" style="margin-left:8px;">Limpar</button>
        </div>
    </div>
</EditForm>

@if (salvo)
{
    <div style="margin-top:20px;">
        <p><strong>Contato salvo:</strong> @ContatoRepo.ObterContatoAtual()?.Nome</p>
<div style="display:flex; flex-direction:column; gap:10px; width:200px; margin-top:10px;">
    <button class="btn btn-success w-100" @onclick="IrParaFinanceiro">Financeiro</button>
    <button class="btn btn-info w-100" @onclick="IrParaSuporte">Suporte</button>
</div>
    </div>
}

@code {
    private Contato novoContato = new();
    private bool salvo = false;

    private async Task SalvarContato()
    {
        await ContatoRepo.SalvarAsync(novoContato);
        ContatoRepo.RegistrarEtapa("Identificação concluída");
        salvo = true;
    }

    private void IrParaFinanceiro()
    {
        NavManager.NavigateTo("/fluxo/financeiro");
    }

    private void IrParaSuporte()
    {
        NavManager.NavigateTo("/fluxo/suporte");
    }

    private void LimparFormulario()
    {
        novoContato = new Contato();
        salvo = false;
    }
}